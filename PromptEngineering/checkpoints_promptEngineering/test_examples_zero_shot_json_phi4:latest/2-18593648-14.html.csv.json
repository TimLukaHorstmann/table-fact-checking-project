[
  {
    "table_id": "2-18593648-14.html.csv",
    "claim": "2 of the artist get a double digit percent vote",
    "predicted_response": 1,
    "resp": "To determine whether the claim \"2 of the artists got a double-digit percent vote\" is true or false, we need to examine the \"televote / sms\" column in the provided table. The goal is to identify how many entries have a percentage that is 10% or higher.\n\nLet's go through each row in the data and check the values in the \"televote / sms\" column:\n\n1. Row 0: 2.95%\n2. Row 1: 0.37%\n3. Row 2: 11.74% (double-digit)\n4. Row 3: 2.39%\n5. Row 4: 2.53%\n6. Row 5: 3.91%\n7. Row 6: 3.20%\n8. Row 7: 8.45%\n9. Row 8: 2.03%\n10. Row 9: 1.16%\n11. Row 10: 55.52% (double-digit)\n12. Row 11: 5.75%\n\nFrom this analysis, we can see that two entries have a televote percentage of double digits:\n\n- Row 2 with 11.74%\n- Row 10 with 55.52%\n\nThese rows correspond to the artists \"poli genova\" and \"stefan dobrev,\" respectively.\n\nSince there are indeed exactly 2 instances where an artist received a double-digit percent vote, the claim is TRUE.\n\nThe relevant cells for this verification are from the \"televote / sms\" column at row indices 2 and 10. Here's the JSON object representing the solution:\n\n```json\n{\n  \"answer\": \"TRUE\",\n  \"relevant_cells\": [\n    {\"row_index\": 2, \"column_name\": \"televote / sms\"},\n    {\"row_index\": 10, \"column_name\": \"televote / sms\"}\n  ]\n}\n```",
    "true_response": 1,
    "relevant_cells": [
      {
        "row_index": 2,
        "column_name": "televote / sms"
      },
      {
        "row_index": 10,
        "column_name": "televote / sms"
      }
    ]
  },
  {
    "table_id": "2-18593648-14.html.csv",
    "claim": "there be 5 artist that only have one name",
    "predicted_response": 1,
    "resp": "To evaluate the claim \"there be 5 artist that only have one name,\" we need to examine each entry in the column labeled \"artist\" from the provided table and count how many artists consist of a single word or name.\n\nLet's break down the relevant data:\n\n1. **Row 1**: Artist is \"stefan ilchev\" - This consists of two names.\n2. **Row 2**: Artist is \"moto\" - This consists of one name.\n3. **Row 3**: Artist is \"poli genova\" - This consists of two names.\n4. **Row 4**: Artist is \"danny milev\" - This consists of two names.\n5. **Row 5**: Artist is \"ivelina\" - This consists of one name.\n6. **Row 6**: Artist is \"grafa\" - This consists of one name.\n7. **Row 7**: Artist is \"sahara\" - This consists of one name.\n8. **Row 8**: Artist is \"mariana popova\" - This consists of two names.\n9. **Row 9**: Artist is \"jura tone feat lady b\" - This consists of more than one component, but the main artist names are considered to be at least three (\"jura\", \"tone\", and \"lady b\").\n10. **Row 10**: Artist is \"stefan dobrev\" - This consists of two names.\n11. **Row 11**: Artist is \"krassimir avramov\" - This consists of two names.\n12. **Row 12**: Artist is \"nora\" - This consists of one name.\n\nFrom the analysis, the artists with only one name are:\n- Row 2: \"moto\"\n- Row 5: \"ivelina\"\n- Row 6: \"grafa\"\n- Row 7: \"sahara\"\n- Row 12: \"nora\"\n\nThis totals to five artists with only a single name. The claim is therefore supported by the data.\n\nThe relevant cells are those in the \"artist\" column for these rows:\n\n```json\n{\n  \"answer\": \"TRUE\",\n  \"relevant_cells\": [\n    {\"row_index\": 1, \"column_name\": \"artist\"},\n    {\"row_index\": 4, \"column_name\": \"artist\"},\n    {\"row_index\": 5, \"column_name\": \"artist\"},\n    {\"row_index\": 6, \"column_name\": \"artist\"},\n    {\"row_index\": 11, \"column_name\": \"artist\"}\n  ]\n}\n```",
    "true_response": 1,
    "relevant_cells": [
      {
        "row_index": 1,
        "column_name": "artist"
      },
      {
        "row_index": 4,
        "column_name": "artist"
      },
      {
        "row_index": 5,
        "column_name": "artist"
      },
      {
        "row_index": 6,
        "column_name": "artist"
      },
      {
        "row_index": 11,
        "column_name": "artist"
      }
    ]
  },
  {
    "table_id": "2-18593648-14.html.csv",
    "claim": "first place get 55.52 percent of the vote , and last place get 0.37 percent of the vote",
    "predicted_response": 1,
    "resp": "To evaluate the claim, we need to verify two conditions against the provided table:\n\n1. The first place receives 55.52% of the vote.\n2. The last place receives 0.37% of the vote.\n\n### Step-by-step Verification\n\n**Step 1: Verify First Place**\n\n- Check the row where \"place\" is 1, as this corresponds to the first place.\n- In the table, we find:\n  - Row index 10 has a \"place\" value of 1.\n  - The corresponding \"televote / sms\" for this row is 55.52%.\n\nThis matches the claim that the first place received 55.52% of the vote.\n\n**Relevant Cells:**\n- Row index 10, Column name \"televote / sms\"\n- Row index 10, Column name \"place\"\n\n**Step 2: Verify Last Place**\n\n- Check the row where \"place\" is 12, as this corresponds to the last place.\n- In the table, we find:\n  - Row index 1 has a \"place\" value of 12.\n  - The corresponding \"televote / sms\" for this row is 0.37%.\n\nThis matches the claim that the last place received 0.37% of the vote.\n\n**Relevant Cells:**\n- Row index 1, Column name \"televote / sms\"\n- Row index 1, Column name \"place\"\n\n### Conclusion\n\nBoth conditions in the claim are verified to be true based on the table data. Therefore, the claim is TRUE.\n\n```json\n{\n  \"answer\": \"TRUE\",\n  \"relevant_cells\": [\n    {\"row_index\": 10, \"column_name\": \"televote / sms\"},\n    {\"row_index\": 10, \"column_name\": \"place\"},\n    {\"row_index\": 1, \"column_name\": \"televote / sms\"},\n    {\"row_index\": 1, \"column_name\": \"place\"}\n  ]\n}\n```",
    "true_response": 1,
    "relevant_cells": [
      {
        "row_index": 10,
        "column_name": "televote / sms"
      },
      {
        "row_index": 10,
        "column_name": "place"
      },
      {
        "row_index": 1,
        "column_name": "televote / sms"
      },
      {
        "row_index": 1,
        "column_name": "place"
      }
    ]
  },
  {
    "table_id": "2-18593648-14.html.csv",
    "claim": "4 of the artist use a one name song",
    "predicted_response": 0,
    "resp": "To evaluate the claim \"4 of the artist use a one name song,\" we need to examine each entry in the table and check if the song title consists of a single word.\n\n### Step-by-step Evaluation:\n\n1. **Understand the Data Structure:**\n   - The table is given in JSON format with two main keys: `columns` and `data`.\n   - `columns` lists the headers: \"draw\", \"artist\", \"song\", \"televote / sms\", \"place\".\n   - `data` contains rows of entries corresponding to these columns.\n\n2. **Identify Relevant Columns:**\n   - The claim pertains to song titles, so we focus on the column named \"song.\"\n\n3. **Evaluate Each Row for the Claim:**\n   - For each row in the data, check if the value under the \"song\" column is a single word.\n\n4. **Check Each Entry:**\n\n   - **Row 1:** Song = \"get up\" (2 words)\n   - **Row 2:** Song = \"razstoyaniya\" (1 word)\n   - **Row 3:** Song = \"one lifetime is not enough\" (5 words)\n   - **Row 4:** Song = \"nyama vreme\" (2 words)\n   - **Row 5:** Song = \"ready for love\" (3 words)\n   - **Row 6:** Song = \"vrag\" (1 word)\n   - **Row 7:** Song = \"don't kiss for the money\" (4 words)\n   - **Row 8:** Song = \"crazy\" (1 word)\n   - **Row 9:** Song = \"chance to love you\" (4 words)\n   - **Row 10:** Song = \"everlasting\" (1 word)\n   - **Row 11:** Song = \"illusion\" (1 word)\n   - **Row 12:** Song = \"it 's not right\" (4 words)\n\n5. **Count the Songs with a Single Word:**\n   - From the above evaluation, the songs with one word are found in rows 2, 6, 8, 10, and 11.\n\n6. **Determine if the Claim is True or False:**\n   - The claim states that there are 4 artists with one-word song titles.\n   - We identified 5 entries with one-word songs, which means the claim is incorrect.\n\n7. **List Relevant Cells:**\n   - Rows with relevant single-word songs: 2, 6, 8, 10, and 11.\n   - Column name for these rows: \"song.\"\n\n### Conclusion:\n\nThe claim is false because there are 5 one-word song titles, not 4.\n\n```json\n{\n  \"answer\": \"FALSE\",\n  \"relevant_cells\": [\n    {\"row_index\": 1, \"column_name\": \"song\"},\n    {\"row_index\": 5, \"column_name\": \"song\"},\n    {\"row_index\": 7, \"column_name\": \"song\"},\n    {\"row_index\": 9, \"column_name\": \"song\"},\n    {\"row_index\": 10, \"column_name\": \"song\"}\n  ]\n}\n```",
    "true_response": 1,
    "relevant_cells": [
      {
        "row_index": 1,
        "column_name": "song"
      },
      {
        "row_index": 5,
        "column_name": "song"
      },
      {
        "row_index": 7,
        "column_name": "song"
      },
      {
        "row_index": 9,
        "column_name": "song"
      },
      {
        "row_index": 10,
        "column_name": "song"
      }
    ]
  },
  {
    "table_id": "2-18593648-14.html.csv",
    "claim": "the word love be use in a song 2 time",
    "predicted_response": 1,
    "resp": "To determine whether the claim \"the word love be use in a song 2 time\" is true or false, we need to analyze the relevant data from the table provided.\n\nThe table contains columns such as \"draw\", \"artist\", \"song\", \"televote / sms\", and \"place\". The claim specifically refers to the usage of the word \"love\" in song titles. Therefore, we should focus on the column named \"song\".\n\nHere's how we can proceed:\n\n1. **Identify Relevant Column**: We need to examine the \"song\" column to check for occurrences of the word \"love\".\n   \n2. **Examine Each Song Title**:\n   - Draw 1: \"get up\" (no occurrence)\n   - Draw 2: \"razstoyaniya\" (no occurrence)\n   - Draw 3: \"one lifetime is not enough\" (no occurrence)\n   - Draw 4: \"nyama vreme\" (no occurrence)\n   - Draw 5: \"ready for love\" (1 occurrence)\n   - Draw 6: \"vrag\" (no occurrence)\n   - Draw 7: \"don't kiss for the money\" (no occurrence)\n   - Draw 8: \"crazy\" (no occurrence)\n   - Draw 9: \"chance to love you\" (1 occurrence)\n   - Draw 10: \"everlasting\" (no occurrence)\n   - Draw 11: \"illusion\" (no occurrence)\n   - Draw 12: \"it 's not right\" (no occurrence)\n\n3. **Count the Occurrences**: The word \"love\" appears in:\n   - Row 5, Column \"song\": \"ready for love\"\n   - Row 9, Column \"song\": \"chance to love you\"\n\n4. **Determine if Claim is True**: The word \"love\" is used exactly twice in song titles as per the table data.\n\nTherefore, the claim is true.\n\nHere's the JSON response with relevant cells:\n\n```json\n{\n  \"answer\": \"TRUE\",\n  \"relevant_cells\": [\n    {\"row_index\": 4, \"column_name\": \"song\"},\n    {\"row_index\": 8, \"column_name\": \"song\"}\n  ]\n}\n```",
    "true_response": 1,
    "relevant_cells": [
      {
        "row_index": 4,
        "column_name": "song"
      },
      {
        "row_index": 8,
        "column_name": "song"
      }
    ]
  },
  {
    "table_id": "2-18593648-14.html.csv",
    "claim": "5 of the artist score under 2%",
    "predicted_response": 0,
    "resp": "To determine whether the claim \"5 of the artist score under 2%\" is true or false, we need to analyze the relevant data from the table provided in the JSON format. The relevant column for this analysis is \"televote / sms\", as it contains the percentage scores for each artist.\n\nLet's examine each row in the data section:\n\n1. Row 0: Artist - stefan ilchev, Score - 2.95% (not under 2%)\n2. Row 1: Artist - moto, Score - 0.37% (under 2%)\n3. Row 2: Artist - poli genova, Score - 11.74% (not under 2%)\n4. Row 3: Artist - danny milev, Score - 2.39% (not under 2%)\n5. Row 4: Artist - ivelina, Score - 2.53% (not under 2%)\n6. Row 5: Artist - grafa, Score - 3.91% (not under 2%)\n7. Row 6: Artist - sahara, Score - 3.20% (not under 2%)\n8. Row 7: Artist - mariana popova, Score - 8.45% (not under 2%)\n9. Row 8: Artist - jura tone feat lady b, Score - 2.03% (not under 2%)\n10. Row 9: Artist - stefan dobrev, Score - 1.16% (under 2%)\n11. Row 10: Artist - krassimir avramov, Score - 55.52% (not under 2%)\n12. Row 11: Artist - nora, Score - 5.75% (not under 2%)\n\nNow, let's count how many artists have scores under 2%:\n\n- moto (Row 1) with 0.37%\n- stefan dobrev (Row 9) with 1.16%\n\nThere are only 2 artists with scores under 2%, not 5 as claimed.\n\nThus, the claim is FALSE.\n\nThe relevant cells for this determination are those in column \"televote / sms\" for rows where the score is explicitly checked:\n\n```json\n{\n  \"answer\": \"FALSE\",\n  \"relevant_cells\": [\n    {\"row_index\": 1, \"column_name\": \"televote / sms\"},\n    {\"row_index\": 9, \"column_name\": \"televote / sms\"}\n  ]\n}\n```",
    "true_response": 0,
    "relevant_cells": [
      {
        "row_index": 1,
        "column_name": "televote / sms"
      },
      {
        "row_index": 9,
        "column_name": "televote / sms"
      }
    ]
  },
  {
    "table_id": "2-18593648-14.html.csv",
    "claim": "there be a 70 percentage point difference between first and last place",
    "predicted_response": 0,
    "resp": "To evaluate the claim \"there be a 70 percentage point difference between first and last place\", we need to analyze the relevant columns in the table:\n\n1. **Identify Relevant Columns:**\n   - The column \"televote / sms\" provides the percentage of votes each song received.\n   - The column \"place\" indicates the ranking position based on these votes.\n\n2. **Determine Top and Bottom Placements:**\n   - The entry with place 1 is in first place.\n   - The entry with place 12 is in last place.\n\n3. **Extract Relevant Data:**\n   - For the first-place entry (row index 10), \"televote / sms\" is 55.52%.\n   - For the last-place entry (row index 1), \"televote / sms\" is 0.37%.\n\n4. **Calculate the Difference:**\n   - The difference between the percentages of first and last place is:\n     \\[\n     55.52\\% - 0.37\\% = 55.15\\%\n     \\]\n\n5. **Evaluate the Claim:**\n   - The claim states there is a \"70 percentage point difference\" between first and last place.\n   - Our calculated difference of 55.15% does not match this claim.\n\nThus, the claim is FALSE.\n\n6. **Identify Relevant Cells:**\n   - First-place entry: Row index 10, Column name \"televote / sms\".\n   - Last-place entry: Row index 1, Column name \"televote / sms\".\n\nHere's the JSON response:\n\n```json\n{\n  \"answer\": \"FALSE\",\n  \"relevant_cells\": [\n    {\"row_index\": 10, \"column_name\": \"televote / sms\"},\n    {\"row_index\": 1, \"column_name\": \"televote / sms\"}\n  ]\n}\n```",
    "true_response": 0,
    "relevant_cells": [
      {
        "row_index": 10,
        "column_name": "televote / sms"
      },
      {
        "row_index": 1,
        "column_name": "televote / sms"
      }
    ]
  },
  {
    "table_id": "2-18593648-14.html.csv",
    "claim": "there be 3 artist call stefan",
    "predicted_response": 0,
    "resp": "To determine whether the claim \"there be 3 artist call stefan\" is TRUE or FALSE, we need to check how many entries in the table have an artist name starting with \"Stefan\". Let's go through the relevant steps:\n\n1. **Identify Relevant Column**: The column of interest for this claim is the \"artist\" column because it contains the names of the artists.\n\n2. **Iterate Over Data Rows**: We need to look at each row in the \"data\" array and check if the artist name matches or starts with \"Stefan\".\n\n3. **Check Each Row**:\n   - **Row 1 (Index 0)**: Artist is \"stefan ilchev\". The name starts with \"stefan\", but it needs to match case-insensitively.\n   - **Row 2 (Index 1)**: Artist is \"moto\". Does not start with \"stefan\".\n   - **Row 3 (Index 2)**: Artist is \"poli genova\". Does not start with \"stefan\".\n   - **Row 4 (Index 3)**: Artist is \"danny milev\". Does not start with \"stefan\".\n   - **Row 5 (Index 4)**: Artist is \"ivelina\". Does not start with \"stefan\".\n   - **Row 6 (Index 5)**: Artist is \"grafa\". Does not start with \"stefan\".\n   - **Row 7 (Index 6)**: Artist is \"sahara\". Does not start with \"stefan\".\n   - **Row 8 (Index 7)**: Artist is \"mariana popova\". Does not start with \"stefan\".\n   - **Row 9 (Index 8)**: Artist is \"jura tone feat lady b\". Does not start with \"stefan\".\n   - **Row 10 (Index 9)**: Artist is \"stefan dobrev\". The name starts with \"stefan\".\n   - **Row 11 (Index 10)**: Artist is \"krassimir avramov\". Does not start with \"stefan\".\n   - **Row 12 (Index 11)**: Artist is \"nora\". Does not start with \"stefan\".\n\n4. **Count Matches**: We found two artists whose names start with \"Stefan\" in a case-insensitive manner:\n   - Row 1: \"stefan ilchev\"\n   - Row 10: \"stefan dobrev\"\n\n5. **Evaluate the Claim**: The claim states there are three artists named \"Stefan\", but we only found two.\n\n6. **Conclusion**: Since the number of artists starting with \"Stefan\" is not equal to three, the claim is FALSE.\n\n7. **Relevant Cells**: The relevant cells for this evaluation are those in the \"artist\" column where the name starts with \"stefan\". These are rows 0 and 9.\n\nThe JSON object representing this conclusion is:\n\n```json\n{\n  \"answer\": \"FALSE\",\n  \"relevant_cells\": [\n    {\"row_index\": 0, \"column_name\": \"artist\"},\n    {\"row_index\": 9, \"column_name\": \"artist\"}\n  ]\n}\n```",
    "true_response": 0,
    "relevant_cells": [
      {
        "row_index": 0,
        "column_name": "artist"
      },
      {
        "row_index": 9,
        "column_name": "artist"
      }
    ]
  },
  {
    "table_id": "2-18593648-14.html.csv",
    "claim": "the winner have the longest song title",
    "predicted_response": 0,
    "resp": "To determine whether the claim \"the winner has the longest song title\" is true or false based on the given table, we need to perform the following steps:\n\n1. **Identify the Winner**: The winner of this context is determined by the lowest place number (since rank 1 indicates first place).\n\n2. **Determine Longest Song Title**: Count the characters in each song title and find which one has the longest length.\n\n3. **Verify if the Winner's Song Title is the Longest**:\n   - Check if the winner's song title matches the longest song title found in step 2.\n   \n4. **Relevant Information Extraction**:\n   - Extract rows corresponding to each artist with their song titles, the place they secured, and compare their lengths to determine which one is longest.\n\nLet's process this:\n\n- From the table, we can see that Krassimir Avramov, with the song \"illusion,\" has a place of 1. Therefore, he is the winner.\n  \n- Next, let's count the characters in each song title:\n  - \"get up\" (6 characters)\n  - \"razstoyaniya\" (12 characters)\n  - \"one lifetime is not enough\" (23 characters)\n  - \"nyama vreme\" (11 characters)\n  - \"ready for love\" (13 characters)\n  - \"vrag\" (4 characters)\n  - \"don't kiss for the money\" (21 characters)\n  - \"crazy\" (5 characters)\n  - \"chance to love you\" (17 characters)\n  - \"everlasting\" (11 characters)\n  - \"illusion\" (8 characters)\n  - \"it 's not right\" (13 characters)\n\n- The longest song title is \"one lifetime is not enough\" with 23 characters.\n\n- Now, let's verify the claim:\n  - The winner Krassimir Avramov has the song \"illusion,\" which is only 8 characters long.\n  - The longest song title belongs to Poli Genova with her song \"one lifetime is not enough.\"\n\nSince the winner does not have the longest song title, the claim is FALSE.\n\nFinally, we'll provide the relevant cells necessary for this determination:\n\n- Krassimir Avramov's entry (to verify he is the winner):\n  - Row index: 10, Columns: [\"artist\", \"song\", \"place\"]\n  \n- Poli Genova's entry (for the longest song title):\n  - Row index: 2, Column: [\"song\"]\n\n```json\n{\n  \"answer\": \"FALSE\",\n  \"relevant_cells\": [\n    {\"row_index\": 10, \"column_name\": \"artist\"},\n    {\"row_index\": 10, \"column_name\": \"song\"},\n    {\"row_index\": 10, \"column_name\": \"place\"},\n    {\"row_index\": 2, \"column_name\": \"song\"}\n  ]\n}\n```",
    "true_response": 0,
    "relevant_cells": [
      {
        "row_index": 10,
        "column_name": "artist"
      },
      {
        "row_index": 10,
        "column_name": "song"
      },
      {
        "row_index": 10,
        "column_name": "place"
      },
      {
        "row_index": 2,
        "column_name": "song"
      }
    ]
  },
  {
    "table_id": "2-18593648-14.html.csv",
    "claim": "2 song title be in english",
    "predicted_response": 0,
    "resp": "To determine whether the claim \"2 song title be in english\" is true or false, we need to verify how many of the song titles listed in the table are in English.\n\nThe relevant column for this task is \"song\", and we will evaluate each row's song title:\n\n1. Row 1: \"get up\" - English\n2. Row 2: \"razstoyaniya\" - Not English (Russian)\n3. Row 3: \"one lifetime is not enough\" - English\n4. Row 4: \"nyama vreme\" - Not English (Bulgarian)\n5. Row 5: \"ready for love\" - English\n6. Row 6: \"vrag\" - Not English (Russian)\n7. Row 7: \"don't kiss for the money\" - English\n8. Row 8: \"crazy\" - English\n9. Row 9: \"chance to love you\" - English\n10. Row 10: \"everlasting\" - English\n11. Row 11: \"illusion\" - English\n12. Row 12: \"it 's not right\" - English\n\nCounting the number of song titles in English, we find that there are 8 songs with English titles.\n\nThe claim states that only 2 song titles should be in English. Since there are more than 2 English song titles, the claim is FALSE.\n\nRelevant cells for verifying this claim include all rows under the \"song\" column:\n\n```json\n{\n  \"answer\": \"FALSE\",\n  \"relevant_cells\": [\n    {\"row_index\": 0, \"column_name\": \"song\"},\n    {\"row_index\": 1, \"column_name\": \"song\"},\n    {\"row_index\": 2, \"column_name\": \"song\"},\n    {\"row_index\": 3, \"column_name\": \"song\"},\n    {\"row_index\": 4, \"column_name\": \"song\"},\n    {\"row_index\": 5, \"column_name\": \"song\"},\n    {\"row_index\": 6, \"column_name\": \"song\"},\n    {\"row_index\": 7, \"column_name\": \"song\"},\n    {\"row_index\": 8, \"column_name\": \"song\"},\n    {\"row_index\": 9, \"column_name\": \"song\"},\n    {\"row_index\": 10, \"column_name\": \"song\"},\n    {\"row_index\": 11, \"column_name\": \"song\"}\n  ]\n}\n```",
    "true_response": 0,
    "relevant_cells": [
      {
        "row_index": 0,
        "column_name": "song"
      },
      {
        "row_index": 1,
        "column_name": "song"
      },
      {
        "row_index": 2,
        "column_name": "song"
      },
      {
        "row_index": 3,
        "column_name": "song"
      },
      {
        "row_index": 4,
        "column_name": "song"
      },
      {
        "row_index": 5,
        "column_name": "song"
      },
      {
        "row_index": 6,
        "column_name": "song"
      },
      {
        "row_index": 7,
        "column_name": "song"
      },
      {
        "row_index": 8,
        "column_name": "song"
      },
      {
        "row_index": 9,
        "column_name": "song"
      },
      {
        "row_index": 10,
        "column_name": "song"
      },
      {
        "row_index": 11,
        "column_name": "song"
      }
    ]
  }
]